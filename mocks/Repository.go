// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	mock "github.com/stretchr/testify/mock"

	models "movie-info/internal/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateClient provides a mock function with given fields:
func (_m *Repository) CreateClient() *dynamodb.DynamoDB {
	ret := _m.Called()

	var r0 *dynamodb.DynamoDB
	if rf, ok := ret.Get(0).(func() *dynamodb.DynamoDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DynamoDB)
		}
	}

	return r0
}

// GetMoviesByMovieID provides a mock function with given fields: tableName, movieID
func (_m *Repository) GetMoviesByMovieID(tableName string, movieID string) ([]*models.MovieItem, error) {
	ret := _m.Called(tableName, movieID)

	var r0 []*models.MovieItem
	if rf, ok := ret.Get(0).(func(string, string) []*models.MovieItem); ok {
		r0 = rf(tableName, movieID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.MovieItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tableName, movieID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderMovies provides a mock function with given fields: tableName, movieProvider
func (_m *Repository) GetProviderMovies(tableName string, movieProvider string) ([]*models.MovieItem, error) {
	ret := _m.Called(tableName, movieProvider)

	var r0 []*models.MovieItem
	if rf, ok := ret.Get(0).(func(string, string) []*models.MovieItem); ok {
		r0 = rf(tableName, movieProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.MovieItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tableName, movieProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMovieItem provides a mock function with given fields: tableName, movieItem
func (_m *Repository) UpdateMovieItem(tableName string, movieItem *models.MovieItem) error {
	ret := _m.Called(tableName, movieItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.MovieItem) error); ok {
		r0 = rf(tableName, movieItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProviderMovies provides a mock function with given fields: tableName, movieProvider, movieItems
func (_m *Repository) UpdateProviderMovies(tableName string, movieProvider string, movieItems []*models.MovieItem) error {
	ret := _m.Called(tableName, movieProvider, movieItems)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []*models.MovieItem) error); ok {
		r0 = rf(tableName, movieProvider, movieItems)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
